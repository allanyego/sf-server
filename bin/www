#!/usr/bin/env node

/**
 * Module dependencies.
 */

require('dotenv').config();

var app = require('../app');
var debug = require('debug')('sf-server:server');
var http = require('http');
var mongoose = require('mongoose');
const Sentry = require('@sentry/node');

const {MONGO_URI,MONGO_USERNAME,MONGO_PASSWORD,SENTRY_DSN,MONGO_DB,NODE_ENV} = process.env;
const db = NODE_ENV == 'test' ? 'test' : MONGO_DB;

const mongoUri = `mongodb+srv://${MONGO_USERNAME}:${encodeURIComponent(MONGO_PASSWORD) +
  MONGO_URI}/${db}?retryWrites=true&w=majority&authSource=admin`;
Sentry.init({ dsn: SENTRY_DSN });

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/* /**
 * Mongoose connection
 */
const connectMongo = async () => {
  try {
    await mongoose.connect(mongoUri, {useNewUrlParser: true/*, dbName: MONGO_DB || 'test'*/});
  } catch(err) {
    console.log("Mongoose error:", err);
    throw err;
  }
};
connectMongo();


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


module.exports = server;
